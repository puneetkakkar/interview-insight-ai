# Project Architecture and Standards

## üèóÔ∏è Overall Architecture

### Full-Stack Architecture
- **Backend**: FastAPI with clean architecture pattern
- **Frontend**: Next.js with modern React patterns
- **Database**: PostgreSQL with SQLAlchemy 2.0
- **API**: RESTful API with versioning (v1)
- **Containerization**: Docker for all environments

### Design Principles
- **Separation of Concerns**: Clear boundaries between layers
- **Clean Architecture**: Dependency inversion and SOLID principles
- **Type Safety**: Full TypeScript coverage + Python type hints
- **Testing First**: Comprehensive test coverage for all components
- **Documentation**: Clear documentation and code comments

## üìÅ Project Structure Standards

### Directory Organization
```
frai-coding-boilerplate/
‚îú‚îÄ‚îÄ backend/           # FastAPI backend application
‚îú‚îÄ‚îÄ frontend/          # Next.js frontend application
‚îî‚îÄ‚îÄ .cursor/           # Cursor rules and configuration
```

### File Naming Conventions
- **Backend**: snake_case for Python files, kebab-case for directories
- **Frontend**: PascalCase for components, camelCase for utilities
- **Configuration**: kebab-case for config files
- **Documentation**: README.md for each major directory

## üîß Development Standards

### Code Quality
- **Linting**: ESLint (frontend) + Ruff (backend)
- **Formatting**: Prettier (frontend) + Ruff (backend)
- **Type Checking**: TypeScript (frontend) + MyPy (backend)
- **Testing**: Jest/Pytest with high coverage targets

### Git Workflow
- **Branch Naming**: `feature/description`, `bugfix/description`
- **Commit Messages**: Conventional commits format
- **Pull Requests**: Required for all changes
- **Code Review**: Mandatory before merging

### Documentation Standards
- **README Files**: Each major directory should have a README
- **API Documentation**: Auto-generated with FastAPI
- **Code Comments**: Clear, concise comments for complex logic
- **Architecture Decisions**: Document major architectural choices

## üöÄ Deployment and Environment

### Environment Management
- **Development**: Local development with hot reload
- **Testing**: Isolated test environments
- **Production**: Production-optimized builds
- **Docker**: Consistent environments across all stages

### Configuration Management
- **Environment Variables**: Type-safe validation
- **Secrets**: Never commit secrets to version control
- **Feature Flags**: Environment-based feature toggles
- **Monitoring**: Health checks and logging

## üìö Technology Stack Standards

### Backend Stack
- **Python 3.11+**: Modern Python with type hints
- **FastAPI**: High-performance async web framework
- **SQLAlchemy 2.0**: Modern async ORM
- **Pydantic V2**: Data validation and settings
- **PostgreSQL**: Primary database with async support

### Frontend Stack
- **Next.js 15**: React framework with App Router
- **React 19**: Latest React with modern patterns
- **TypeScript 5.8**: Strict type checking
- **Tailwind CSS 4.0**: Utility-first CSS framework
- **Zod**: Runtime type validation

### Development Tools
- **Package Managers**: UV (Python) + PNPM (Node.js)
- **Containerization**: Docker with multi-stage builds
- **Testing**: Pytest + Jest with comprehensive coverage
- **CI/CD**: Automated testing and deployment pipelines
alwaysApply: true
---
