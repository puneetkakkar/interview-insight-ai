# Cross-Project Development Workflow

## ðŸ”„ Full-Stack Development

### Simultaneous Development
- **Backend + Frontend**: Develop API and UI components together
- **API Contracts**: Define schemas in backend, consume in frontend
- **Type Sharing**: Consider sharing types between projects
- **Integration Testing**: Test full-stack functionality

### Development Environment Setup
1. **Start Backend**: `cd backend && make dev-up`
2. **Start Frontend**: `cd frontend && pnpm dev`
3. **Database**: PostgreSQL running on port 5433 (dev)
4. **API**: Backend running on port 8000
5. **Frontend**: Next.js running on port 3000

## ðŸ”— API Integration

### Backend API Development
- **Schema First**: Define Pydantic schemas before implementation
- **Versioning**: Use `/api/v1/` prefix for all endpoints
- **Documentation**: FastAPI auto-generates OpenAPI docs
- **Testing**: Test API endpoints with pytest

### Frontend API Consumption
- **Type Safety**: Use Zod for runtime validation
- **Error Handling**: Implement proper error boundaries
- **Loading States**: Show loading indicators during API calls
- **Caching**: Implement appropriate caching strategies

## ðŸ§ª Testing Strategy

### Backend Testing
- **Unit Tests**: Test individual functions and classes
- **Integration Tests**: Test API endpoints and database
- **Test Database**: Use separate test database
- **Fixtures**: Use test data generators

### Frontend Testing
- **Component Tests**: Test React components in isolation
- **Integration Tests**: Test API integration
- **E2E Tests**: Test complete user workflows
- **Mocking**: Mock API responses for testing

### Cross-Project Testing
- **API Contract Tests**: Verify frontend/backend compatibility
- **Integration Tests**: Test full-stack functionality
- **Performance Tests**: Monitor API response times
- **Security Tests**: Test authentication and authorization

## ðŸ“Š Development Monitoring

### Backend Monitoring
- **Logging**: Structured logging with python-json-logger
- **Health Checks**: `/health` endpoint for monitoring
- **Metrics**: Performance and error metrics
- **Debugging**: Hot reload and debugging tools

### Frontend Monitoring
- **Error Tracking**: React error boundaries
- **Performance**: Next.js performance monitoring
- **Analytics**: User interaction tracking
- **Debugging**: React DevTools and debugging

## ðŸš€ Deployment Workflow

### Environment Coordination
- **Development**: Local development with Docker
- **Staging**: Test environment with production-like setup
- **Production**: Production deployment with monitoring
- **Rollbacks**: Quick rollback procedures

### CI/CD Pipeline
- **Backend**: Python testing, linting, and building
- **Frontend**: TypeScript checking, linting, and building
- **Integration**: Full-stack testing and validation
- **Deployment**: Automated deployment to environments

## ðŸ”§ Common Development Tasks

### Adding New Features
1. **Backend**: Define schemas, models, and API endpoints
2. **Frontend**: Create components and integrate with API
3. **Testing**: Write tests for both backend and frontend
4. **Documentation**: Update API docs and component docs

### Database Changes
1. **Backend**: Create Alembic migration
2. **Testing**: Test migration in development
3. **Deployment**: Apply migration in staging/production
4. **Frontend**: Update types if needed

### API Changes
1. **Versioning**: Consider API versioning for breaking changes
2. **Backward Compatibility**: Maintain compatibility when possible
3. **Frontend Updates**: Update frontend to handle changes
4. **Testing**: Test both old and new API versions
description:
globs:
alwaysApply: false
---
