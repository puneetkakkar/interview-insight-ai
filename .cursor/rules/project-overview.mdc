# FRAI Boilerplate - Project Overview

## üèóÔ∏è Project Structure

This is a full-stack FRAI boilerplate project with the following structure:

### Backend (FastAPI)
- **Entry Point**: [backend/src/app/main.py](mdc:backend/src/app/main.py)
- **Configuration**: [backend/src/app/core/config.py](mdc:backend/src/app/core/config.py)
- **Database**: [backend/src/app/core/db/database.py](mdc:backend/src/app/core/db/database.py)
- **API Routes**: [backend/src/app/api/v1/](mdc:backend/src/app/api/v1/)
- **Models**: [backend/src/app/models/](mdc:backend/src/app/models/)
- **Schemas**: [backend/src/app/schemas/](mdc:backend/src/app/schemas/)
- **Repositories**: [backend/src/app/repositories/](mdc:backend/src/app/repositories/)
- **Project Config**: [backend/pyproject.toml](mdc:backend/pyproject.toml)

### Frontend (Next.js)
- **Entry Point**: [frontend/src/app/page.tsx](mdc:frontend/src/app/page.tsx)
- **Layout**: [frontend/src/app/layout.tsx](mdc:frontend/src/app/layout.tsx)
- **Configuration**: [frontend/next.config.js](mdc:frontend/next.config.js)
- **Package Config**: [frontend/package.json](mdc:frontend/package.json)

### Key Technologies
- **Backend**: FastAPI, SQLAlchemy 2.0, Pydantic V2, PostgreSQL, Alembic
- **Frontend**: Next.js 15, React 19, TypeScript, Tailwind CSS
- **Development**: Docker, UV package manager, pytest, ESLint, Prettier

## üìö Architecture Pattern
- Clean Architecture with Repository pattern
- API versioning (v1)
- Separation of concerns (models, schemas, repositories, API)
- Comprehensive testing structure (unit, integration)
- Docker-based development environments

## üîß General Code Quality Standards
- Follow the established project structure
- Use meaningful file and function names
- Keep functions small and focused
- Implement proper separation of concerns
- Write clear documentation
- Use descriptive commit messages
- Follow conventional commit format

## üöÄ Development Commands

### Backend
- `make dev-up` - Start development environment
- `make test` - Run tests
- `make format` - Format code
- `make lint` - Lint code
- `make migrate` - Run database migrations

### Frontend
- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm lint` - Run linting
- `pnpm format:write` - Format code
- `pnpm typecheck` - Run TypeScript type checking

### Docker
- `make dev-up` - Start development environment
- `make prod-up` - Start production environment
- `make test-env` - Start testing environment
- `make clean` - Remove all containers and volumes
alwaysApply: true
---
