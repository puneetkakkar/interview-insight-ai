# Testing Guidelines

## Test Organization
- **Unit Tests**: [tests/unit/](mdc:tests/unit/) - Test individual functions/classes
- **Integration Tests**: [tests/integration/](mdc:tests/integration/) - Test API endpoints and database
- **Test Helpers**: [tests/helpers/](mdc:tests/helpers/) - Common test utilities and mocks

## Test Configuration
- **Pytest**: Use pytest as the testing framework
- **Async Support**: Use pytest-asyncio for async tests
- **Fixtures**: Define common fixtures in [tests/conftest.py](mdc:tests/conftest.py)
- **Coverage**: Aim for high test coverage with pytest-cov

## Testing Patterns
- **Arrange-Act-Assert**: Follow AAA pattern for test structure
- **Mocking**: Use pytest-mock for mocking dependencies
- **Database**: Use test database with proper isolation
- **Async Tests**: Mark async tests with `@pytest.mark.asyncio`

## Test Data
- **Generators**: Use [tests/helpers/generators.py](mdc:tests/helpers/generators.py) for test data
- **Factories**: Create test data factories for complex objects
- **Cleanup**: Ensure test data is cleaned up after each test
- **Isolation**: Each test should be independent

## Example Test Pattern
```python
import pytest
from httpx import AsyncClient
from .conftest import client

@pytest.mark.asyncio
async def test_get_items(client: AsyncClient):
    # Arrange
    # Create test data if needed
    
    # Act
    response = await client.get("/api/v1/items")
    
    # Assert
    assert response.status_code == 200
    data = response.json()
    assert "data" in data
```

## Running Tests
- **Unit Tests**: `pytest tests/unit/`
- **Integration Tests**: `pytest tests/integration/`
- **All Tests**: `pytest`
- **With Coverage**: `pytest --cov=src`
- **Specific Test**: `pytest tests/unit/test_items.py::test_create_item`
globs: tests/**/*.py,src/**/*.py
---
