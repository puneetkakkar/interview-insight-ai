# Database and Models Development Guidelines

## SQLAlchemy 2.0 Patterns
- **Async First**: Use async SQLAlchemy patterns throughout
- **Type Annotations**: All models should have comprehensive type hints
- **Declarative Base**: Use the base from [src/app/core/db/database.py](mdc:src/app/core/db/database.py)

## Model Structure
- **File Naming**: One model per file in [src/app/models/](mdc:src/app/models/)
- **Inheritance**: Inherit from `Base` for all models
- **Relationships**: Define clear relationships with proper back_populates
- **Validation**: Use Pydantic for input validation, SQLAlchemy for persistence

## Repository Pattern
- **Data Access**: Use repository classes in [src/app/repositories/](mdc:src/app/repositories/)
- **Base Repository**: Extend [src/app/repositories/base.py](mdc:src/app/repositories/base.py)
- **Async Operations**: All database operations should be async
- **Transaction Management**: Use proper session management

## Database Configuration
- **Environment Based**: Different databases for dev/test/prod
- **Connection Pooling**: Configured in [src/app/core/db/database.py](mdc:src/app/core/db/database.py)
- **Migrations**: Use Alembic for schema changes
- **Seeding**: Use migration scripts for initial data

## Example Model Pattern
```python
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.orm import relationship
from datetime import datetime
from ..core.db.database import Base

class Item(Base):
    __tablename__ = "items"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
```

## Testing Database
- **Test Isolation**: Use separate test database
- **Fixtures**: Create test data using [tests/helpers/generators.py](mdc:tests/helpers/generators.py)
- **Cleanup**: Ensure test data is cleaned up after each test
globs: src/app/models/**/*.py,src/app/core/db/**/*.py,src/app/repositories/**/*.py
---
