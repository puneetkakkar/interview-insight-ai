# Tailwind CSS and Styling Guidelines

## Tailwind CSS 4.0
- **CSS Variables**: Use CSS custom properties for theming
- **Global Styles**: Configure in [src/styles/globals.css](mdc:src/styles/globals.css)
- **Utility Classes**: Leverage Tailwind's utility-first approach
- **Responsive Design**: Use responsive prefixes (sm:, md:, lg:, xl:)

## CSS Architecture
- **Global Styles**: Define in [src/styles/globals.css](mdc:src/styles/globals.css)
- **Component Styles**: Use Tailwind classes directly in components
- **CSS Variables**: Define custom properties in the theme section
- **Font Configuration**: Use Next.js font optimization with CSS variables

## Tailwind Configuration
- **CSS Variables**: Define custom properties in theme section
- **Font Stack**: Configure font families using CSS variables
- **Color Palette**: Use semantic color names and CSS variables
- **Spacing**: Leverage Tailwind's spacing scale

## Example Styling Pattern
```tsx
export default function StyledComponent() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
      <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
        <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
          Component Title
        </h1>
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
          {/* Content */}
        </div>
      </div>
    </div>
  );
}
```

## CSS Variables Usage
```css
@theme {
  --font-sans: var(--font-geist-sans), ui-sans-serif, system-ui, sans-serif;
  --color-primary: #2e026d;
  --color-secondary: #15162c;
  --color-accent: hsl(280, 100%, 70%);
}
```

## Responsive Design Patterns
- **Mobile First**: Design for mobile, enhance for larger screens
- **Breakpoints**: Use Tailwind's responsive prefixes
- **Grid Systems**: Leverage CSS Grid and Flexbox utilities
- **Spacing**: Use consistent spacing scale across components

## Accessibility and Styling
- **Focus States**: Ensure proper focus indicators
- **Color Contrast**: Maintain sufficient color contrast ratios
- **Interactive Elements**: Style buttons and links appropriately
- **Semantic HTML**: Use proper HTML elements for styling hooks

## Performance Considerations
- **Purge CSS**: Tailwind automatically purges unused styles
- **CSS-in-JS**: Avoid runtime CSS-in-JS for better performance
- **Critical CSS**: Inline critical styles for above-the-fold content
- **Font Loading**: Use Next.js font optimization
globs: src/**/*.tsx,src/**/*.ts,src/**/*.css
---
